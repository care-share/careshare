// Generated by CoffeeScript 1.9.3
import DS from 'ember-data';
var Patient;

Patient = DS.Model.extend({
  identifier: DS.hasMany('identifier'),
  name: DS.hasMany('human-name'),
  telecom: DS.hasMany('contact-point'),
  gender: DS.belongsTo('codeable-concept'),
  birthDate: DS.attr('date'),
  deceasedBoolean: DS.attr('boolean'),
  deceasedDateTime: DS.attr('date'),
  address: DS.hasMany('address'),
  maritalStatus: DS.belongsTo('codeable-concept'),
  multipleBirthBoolean: DS.attr('boolean'),
  multipleBirthInteger: DS.attr(),
  photo: DS.hasMany('attachment'),
  contact: DS.hasMany('contact'),
  animal: DS.belongsTo('animal'),
  communication: DS.hasMany('codeable-concept'),
  careProvider: DS.hasMany('reference'),
  managingOrganization: DS.belongsTo('reference'),
  link: DS.hasMany('link'),
  active: DS.attr('boolean'),
  conditions: DS.hasMany('condition', {
    async: true
  }),
  observations: DS.hasMany('observation', {
    async: true
  }),
  encounters: DS.hasMany('encounter', {
    async: true
  }),
  medications: DS.hasMany('medicationStatement', {
    async: true
  }),
  fullName: Ember.computed('name', function() {
    var firstHumanName, ref;
    firstHumanName = (ref = this.get('name')) != null ? ref.get('firstObject') : void 0;
    return (firstHumanName != null ? firstHumanName.get('family') : void 0) + ', ' + (firstHumanName != null ? firstHumanName.get('given') : void 0);
  }),
  computedAge: Ember.computed('birthDate', function() {
    if (this.get('birthDate')) {
      return moment().diff(moment(this.get('birthDate')), 'years');
    } else {
      return Math.round(Math.random() * (92 - 65) + 65);
    }
  }),
  activeMedications: Ember.computed.filterBy('medications', 'active', true),
  activeConditions: Ember.computed.filterBy('conditions', 'active', true),
  emergencyDepartmentAdmissions: Ember.computed.filter('encounters', function(item) {
    return item.hasCode('type', {
      code: "4525004",
      system: "http://snomed.info/sct"
    }) && item.inLast('period.start', 60, 'days');
  }),
  inpatientAdmissions: Ember.computed.filter('encounters', function(item) {
    return item.hasCode('type', {
      code: '99221',
      system: 'http://www.ama-assn.org/go/cpt'
    }) || item.hasCode('type', {
      code: '99222',
      system: 'http://www.ama-assn.org/go/cpt'
    }) || item.hasCode('type', {
      code: '99223',
      system: 'http://www.ama-assn.org/go/cpt'
    });
  }),
  readmissions: Ember.computed('inpatientAdmissions', function() {
    var result;
    result = this.get('inpatientAdmissions').sortBy('period.end').reduce(function(previousValue, item, index, enumerable) {
      if (previousValue != null) {
        if (item.sinceDate('period.end', 30, 'days', previousValue.previousAdmission.get('period.end'))) {
          previousValue.count++;
        }
        previousValue.previousAdmission = item;
        return previousValue;
      } else {
        return {
          count: 0,
          previousAdmission: item
        };
      }
    }, null);
    return (result != null ? result.count : void 0) || 0;
  }),
  computedGender: Ember.computed('gender', function() {
    var ref, value;
    value = (ref = this.get('gender')) != null ? ref.toString() : void 0;
    if (value === 'M') {
      return 'male';
    } else if (value === 'F') {
      return 'female';
    } else {
      return 'other';
    }
  }),
  isMale: Ember.computed.equal('computedGender', 'male'),
  isFemale: Ember.computed.equal('computedGender', 'female'),
  isOtherGender: Ember.computed('computedGender', function() {
    return this.get('computedGender') !== 'male' && this.get('computedGender') !== 'female';
  }),
  patientLocation: 'Home',
  events: Ember.computed('medications', 'observations', 'conditions', 'encounters', function() {
    var events;
    events = Ember.A();
    events.pushObject(this.store.createRecord('event', {
      event: {
        startDate: this.get('birthDate'),
        text: (this.get('fullName')) + " born."
      },
      type: "birth"
    }));
    this.get("conditions").forEach((function(_this) {
      return function(ev) {
        events.pushObject(_this.store.createRecord('event', {
          event: ev,
          type: "condition"
        }));
        if ((ev.get('abatementDate') != null) && (ev.get('abatementDate') >= ev.get('onsetDate'))) {
          return events.pushObject(_this.store.createRecord('event', {
            event: ev,
            isEnd: true,
            type: "condition"
          }));
        }
      };
    })(this));
    this.get("encounters").forEach((function(_this) {
      return function(ev) {
        events.pushObject(_this.store.createRecord('event', {
          event: ev,
          type: "encounter"
        }));
        if ((ev.get('period.end') != null) && (ev.get('period.end') >= ev.get('period.start'))) {
          return events.pushObject(_this.store.createRecord('event', {
            event: ev,
            isEnd: true,
            type: "encounter"
          }));
        }
      };
    })(this));
    this.get("medications").forEach((function(_this) {
      return function(ev) {
        events.pushObject(_this.store.createRecord('event', {
          event: ev,
          isEnd: false,
          type: "medication"
        }));
        if ((ev.get('whenGiven.end') != null) && (ev.get('whenGiven.end') >= ev.get('whenGiven.start'))) {
          return events.pushObject(_this.store.createRecord('event', {
            event: ev,
            isEnd: true,
            type: "medication"
          }));
        }
      };
    })(this));
    return events.sortBy('effectiveDate').reverse();
  })
});

export default Patient;
